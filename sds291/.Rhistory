modelr::boostrap(1000)
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
Auto_bootstrap
fn_model = function(data){
lm(mpg ~ horsepower, data = data)
}
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_model))
?map
library(purrr)
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_model))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
?unnest
library(tidyr)
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
df_regression_bootstrap_param %>% filter(term == horsepower) %>% summarize(mean = mean(std.error))
df_regression_bootstrap_param %>% filter(term == "horsepower") %>% summarize(mean = mean(std.error))
df_regression_bootstrap_param %>% filter(term == "(Intercept)") %>% summarize(mean = mean(std.error))
boot(Auto,boot.fn,1000)
boot.fn=function(data,index) return(coef(lm(mpg~horsepower ,data=data ,subset =index)))
boot(Auto,boot.fn,1000)
set.seed(1)
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
fn_model = function(data){
lm(mpg ~ horsepower, data = data)
}
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_model))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
df_regression_bootstrap_param %>% filter(term == "horsepower") %>% summarize(mean = mean(std.error))
df_regression_bootstrap_param %>% filter(term == "(Intercept)") %>% summarize(mean = mean(std.error))
set.seed(1)
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower ,data=Auto))$coef
alpha.fn=function(data,index){
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio,1:100)
fn_alpha = function(data){
data %>%
summarize(alpha=(var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
fn_alpha(Portfolio[1:100,])
alpha.fn(Portfolio,1:100)
Portfolio %>%
slice(1:100) %>%
fn_alpha()
set.seed(1)
?sample_n
Portfolio %>%
sample_n(100, replace=TRUE) %>%
fn_alpha()
modelr::bootstrap(1000) %>%
Portfolio %>%
modelr::bootstrap(1000) %>%
mutate(alpha = map(strap, fn_alpha))
Portfolio %>%
modelr::bootstrap(1000) %>%
mutate(alpha = map(strap, fn_alpha))
fn_alpha = function(data){
Y = data$Y
X = data$X
return(alpha=(var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
set.seed(1)
Portfolio %>%
sample_n(100, replace=TRUE) %>%
fn_alpha()
Portfolio %>%
modelr::bootstrap(1000) %>%
mutate(alpha = map(strap, fn_alpha))
names(Portfolio)
Portfolio %>%
modelr::bootstrap(1000)
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1000)
boostrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
fn_alpha = function(data){
Y = data$Y
X = data$X
(var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y))
}
Portfolio %>%
sample_n(100, replace=TRUE) %>%
fn_alpha()
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1000)
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
fn_model = function(data){
lm(mpg ~ horsepower, data = data)
}
fn_model(Auto)
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_model))
df_regression_bootstrap_model
?map
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
fn_alpha = function(data){
data %>%
summarize(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
Portfolio %>%
sample_n(100, replace=TRUE) %>%
fn_alpha()
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
fn_alpha = function(data){
data %>%
summarize_(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
fn_alpha = function(data){
data %>%
summarize(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
boot(Portfolio, alpha.fn, R=1000)
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
Auto_bootstrap
trial = bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
?bootstrap
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1000)
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
modelr::bootstrap
modelr::bootstrap
?map
fn_alpha = function(data){
data %>%
summarize(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1000)
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
?model.response
?modelr
?map
?bootstrap
mtcars %>% bootstrap(10) %>% do(fn_alpha)
fn_alpha = function(data){
data %>%
summarize(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y))) %>%
data.frame()
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
mtcars %>% bootstrap(10) %>% do(fn_alpha)
Portfolio %>% bootstrap(10) %>% do(fn_alpha)
?summarize
?as.data.frame
fn_alpha = function(data){
data %>%
summarize(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y))) %>%
as.data.frame()
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
a <- Portfolio %>%
slice(1:100) %>%
fn_alpha()
class(a)
Portfolio %>% bootstrap(10) %>% do(fn_alpha)
?bootstrap
Portfolio %>% bootstrap(10) %>% do(fn_alpha(.))
names(Portfolio)
fn_alpha = function(data){
Y = data$Y
X = data$X
alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y))
return(alpha=alpha)
}
a <- Portfolio %>%
slice(1:100) %>%
fn_alpha()
a
fn_alpha = function(data){
Y = data$Y
X = data$X
alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y))
return(data.frame(alpha=alpha))
}
a <- Portfolio %>%
slice(1:100) %>%
fn_alpha()
a
Portfolio %>%
slice(1:100) %>%
fn_alpha()
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1000)
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1000)
bootstrap_Portfolio
bootstrap_Portfolio[[1]]
bootstrap_Portfolio
?tibble
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1)
bootstrap_Portfolio
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
fn_model = function(data){
lm(mpg ~ horsepower, data = data)
}
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_model))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
df_regression_bootstrap_model
fn_alpha = function(data){
Y = data$Y
X = data$X
alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y))
return(list(alpha=alpha))
}
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
bootstrap_Portfolio
?map
Auto %>% fn_model()
set.seed(1)
Auto_bootstrap = Auto %>%
modelr::bootstrap(1)
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_model))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
Auto %>%
modelr::bootstrap(1) %>%
mutate(model = map(strap, fn_model))  %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
set.seed(1)
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_model))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
df_regression_bootstrap_param %>%
group_by(term) %>%
summarize(point_est = mean(estimate),
std_error = mean(std.error))
summary(lm(mpg~horsepower, data=Auto))$coef
summary(lm(mpg~horsepower, data=Auto))
boot_fn = function(data){
coefficients(lm(mpg~horsepower + I(horsepower^2) ,data=data))
}
set.seed(1)
set.seed(1)
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_boot))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
df_regression_bootstrap_param %>%
group_by(term) %>%
summarize(point_est = mean(estimate),
std_error = mean(std.error))
summary(lm(mpg~horsepower + I(horsepower^2), data=Auto))
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_boot))
fn_boot = function(data){
coefficients(lm(mpg~horsepower + I(horsepower^2) ,data=data))
}
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_boot))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
df_regression_bootstrap_param %>%
group_by(term) %>%
summarize(point_est = mean(estimate),
std_error = mean(std.error))
df_regression_bootstrap_param %>%
group_by(names) %>%
summarize(point_est = mean(estimate),
std_error = mean(std.error))
fn_boot = function(data){
lm(mpg~horsepower + I(horsepower^2) ,data=data)
}
set.seed(1)
Auto_bootstrap = Auto %>%
modelr::bootstrap(1000)
df_regression_bootstrap_model = Auto_bootstrap %>%
mutate(model = map(strap, fn_boot))
df_regression_bootstrap_param = df_regression_bootstrap_model %>%
mutate(param = map(model, tidy)) %>%
select(.id, param) %>%
unnest() %>%
print()
df_regression_bootstrap_param %>%
group_by(term) %>%
summarize(point_est = mean(estimate),
std_error = mean(std.error))
summary(lm(mpg~horsepower + I(horsepower^2), data=Auto))
fn_alpha = function(data){
data %>%
mutate(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
fn_alpha = function(data){
data %>%
summarize(alpha = (var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
Portfolio %>%
slice(1:100) %>%
fn_alpha()
Portfolio %>%
slice(1:100) %>%
fn_alpha()
bootstrap_Portfolio = Portfolio %>%
modelr::bootstrap(1)
bootstrap_Portfolio %>%
mutate(alpha = map(strap, fn_alpha))
library(readr)
sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated <- read_csv("~/Documents/sds291/student_info/SDS291- 01_MTH291- 01_201701 Grades-20161103_1345-comma_separated.csv")
View(sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated)
sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated <- sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated %>% mutate(pointsmissed = 101-Exam1(Real))
library(mosaic)
sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated <- sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated %>% mutate(pointsmissed = 101-Exam1(Real))
names(sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated)
sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated <- sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated %>% mutate(pointsmissed = 101-`Exam1 (Real)`)
sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated <- sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated %>% mutate(pointsmissed = 101-`Exam1 (Real)`, newExam1 = `Exam1 (Real)` + 0.5*pointsmissed)
favstats(~`Exam1 (Real)`, data=sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated)
favstats(~`newExam1`, data=sds291_01_mth291_01_201701_grades_20161103_1345_comma_separated)
library(readr)
LifeExpectancyVehicles <- read_csv("~/Downloads/LifeExpectancyVehicles.csv")
View(LifeExpectancyVehicles)
library(mosaic)
library(readr)
AllCountries <- read_csv("~/Downloads/AllCountries.csv")
View(AllCountries)
qplot(data=AllCountries, x=LifeExpectancy)
histogram(~LifeExpectancy, data=AllCountries)
hist(AllCountries$LifeExpectancy)
AllCountries %>%
summarize(mean(LifeExpectancy), sd(LifeExpectancy))
AllCountries %>%
summarize(mean(LifeExpectancy, na.rm=TRUE), sd(LifeExpectancy, na.rm=TRUE))
favstats(~LifeExpectancy, data=AllCountries)
mean(~LifeExpectancy, data=AllCountries)
skim(AllCountries, LifeExpectancy)
library(skimr)
install.packages("skimr")
skim(AllCountries, LifeExpectancy)
library(skimr)
skim(AllCountries, LifeExpectancy)
mean(AllCountries$LifeExpectancy)
mean(AllCountries$LifeExpectancy, na.rm=TRUE)
AllCountries %>%
summarize(mean(LifeExpectancy, na.rm=TRUE), median(LifeExpectancy, na.rm=TRUE))
favstats(~LifeExpectancy, data=AllCountries)
qplot(AllCountries, x=LifeExpectancy, geom="boxplot")
qplot(data=AllCountries, x=LifeExpectancy, geom="boxplot")
qplot(data=AllCountries, x=LifeExpectancy, y=1, geom="boxplot")
qplot(data=AllCountries, y=LifeExpectancy, geom="boxplot")
qplot(data=AllCountries, y=LifeExpectancy, x=Developed, geom="boxplot")
AllCountries <- AllCountries %>%
filter(!is.na(Developed))
qplot(data=AllCountries, y=LifeExpectancy, x=Developed, geom="boxplot")
bwplot(~LifeExpectancy, data=AllCountries)
bwplot(Developed~LifeExpectancy, data=AllCountries)
?boxplot
boxplot(AllCountries$LifeExpectancy)
boxplot(AllCountries$LifeExpectancy, AllCountries$Developed)
bwplot(Developed~LifeExpectancy, data=AllCountries)
boxplot(AllCountries$LifeExpectancy, AllCountries$Developed)
summary(AllCountries$Developed)
summary(as.factor(AllCountries$Developed))
qplot(data=AllCountries, x=Developed)
qplot(data=AllCountries, x=Code)
country = c(rep("US", 14), rep("India", 4), rep("Ghana", 2), rep("US", 6), rep("India", 3), rep("Ghana", 2), rep("India", 13), rep("Ghana", 16))
country = c(rep("US", 14), rep("India", 4), rep("Ghana", 2), rep("US", 6), rep("India", 3), rep("Ghana", 2), rep("India", 13), rep("Ghana", 16))
country
qplot(data=country, x=country)
country = data.frame(c(rep("US", 14), rep("India", 4), rep("Ghana", 2), rep("US", 6), rep("India", 3), rep("Ghana", 2), rep("India", 13), rep("Ghana", 16)))
qplot(data=country, x=country)
View(country)
country = data.frame(country= c(rep("US", 14), rep("India", 4), rep("Ghana", 2), rep("US", 6), rep("India", 3), rep("Ghana", 2), rep("India", 13), rep("Ghana", 16)))
qplot(data=country, x=country)
country = data.frame(
country= c(rep("US", 20), rep("India", 20), rep("Ghana", 20)),
results = c(rep("negative", 14), rep("neutral", 6), rep("positive", 0), rep("negative", 4), rep("neutral", 3), rep("positive", 13), rep("negative", 2), rep("neutral", 2), rep("positive", 16)))
View(country)
country %>%
count()
country %>%
group_by(results)
country %>%
group_by(results)
country %>%
group_by(results)
country
country %>%
tally(results)
country %>%
count(results)
country %>%
count(country)
?count
country %>%
tally(results)
country %>%
count(results)
tally(~results, data=country)
tally(~country, data=country)
tally(country~results, data=country)
tally(country~results, data=country, format = percent)
tally(country~results, data=country, format = "percent")
tally(country~results, data=country, format = "prop")
table(country$results)
table(country$results,format="percent")
?table
table(country$results, country$country)
qplot(data=country, x=results)
qplot(data=country, x=results, y=country)
qplot(data=country, x=results, y=country, geom="bar")
qplot(data=country, x=results, geom="bar") + facet_wrap(~country)
bwplot(~results, data=country)
barchart(~results, data=country)
bargraph(~results, data=country)
bargraph(results~country, data=country)
barchart(results~country, data=country)
bargraph(~results, data=country, group=country)
bargraph(~results, data=country, group=country)
bargraph(~am, data=mtcars, group=cyl)
bargraph(~country, data=country, group=results)
bargraph(~results, data=country, group=country)
tally(country~results, data=culture, format = "prop")
culture = data.frame(
country= c(rep("US", 20), rep("India", 20), rep("Ghana", 20)),
results = c(rep("negative", 14), rep("neutral", 6), rep("positive", 0), rep("negative", 4), rep("neutral", 3), rep("positive", 13), rep("negative", 2), rep("neutral", 2), rep("positive", 16)))
tally(country~results, data=culture, format = "prop")
qplot(data=culture, x=results, geom="bar") + facet_wrap(~country)
bargraph(~results, data=culture, group=country)
barchart(~results, data=culture, group=country)
bargraph(~results, data=culture, group=country)
View(culture)
?bargraph
bargraph(~results, data=culture, groups=country)
bargraph(~results|country, data=culture)
barchart(culture$results, culture$country)
?barchart
?bargraph
barplot(culture$results, culture$country)
?barplot
