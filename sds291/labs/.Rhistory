grades <- read.csv("~/sds220-f15/student_info/MTH220-SDS220-F15 Grades-20151222_1846-comma_separated.csv", na.strings = "-")
names(grades)
grades <- select(grades, -Assignment.Homework..6..Real.)
```{r}
hw_df <- grades %>%
select(contains("Homework"))
hw_df[is.na(hw_df)] <- 0
hw_df <- hw_df %>%
mutate(Assignment.Homework..1..Real. = Assignment.Homework..1..Real. * 2) %>%
mutate(hw_total = rowSums(.))
hw_df$hw_min <- apply(hw_df, MARGIN = 1, min)
# drop the lowest score??
hw_df <- hw_df %>%
mutate(hw_grade = (hw_total - 1*hw_min) / (20 * 7))
grades$hw <- hw_df$hw_grade
grades %>%
select(First.name, Last.name, hw) %>%
arrange(desc(hw))
```
```{r}
lab_df <- grades %>%
select(matches("(Lab|Quiz|Intro|Inference|Interval|Regression|Probability|Sampling|Normal)"))
lab_df[is.na(lab_df)] <- 0
lab_df <- lab_df %>%
mutate(R.Quiz..Real. = R.Quiz..Real. * (10/14)) %>%
mutate(lab_total = rowSums(.))
lab_df$lab_min <- apply(lab_df, MARGIN = 1, min)
# drop the lowest score??
lab_df <- lab_df %>%
mutate(lab_grade = (lab_total - 1*lab_min) / (10 * 11))
grades$lab <- lab_df$lab_grade
grades %>%
select(First.name, Last.name, lab) %>%
arrange(desc(lab))
```
```{r}
project_df <- grades %>%
select(matches("(Group|roposal|Presentation|Data\\.File|Write)"))
project_df[is.na(project_df)] <- 0
project_df <- project_df %>%
mutate(project_total = rowSums(.)) %>%
mutate(project_grade = project_total / 100)
grades$project <- project_df$project_grade
grades %>%
select(First.name, Last.name, hw, lab, project) %>%
arrange(desc(project))
```
Implement the bootstrapping for exams
```{r}
thresholds <- c(80, 80, 76)
grades <- mutate(grades, Exam.3..Real. = Exam.3..Real. + 6)
bstrap_1.idx <- with(grades, which(Exam.2..Real. >= thresholds[2] & Exam.1..Real. < thresholds[1]))
grades[bstrap_1.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_2.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.1..Real. < thresholds[1]))
grades[bstrap_1.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_3.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.2..Real. < thresholds[2]))
grades[bstrap_1.idx, "Exam.2..Real."] <- thresholds[2]
```
```{r}
grades$exam <- grades %>%
select(contains("Exam")) %>%
rowSums(.) / 300
grades %>%
select(First.name, Last.name, hw, lab, project, exam) %>%
arrange(desc(exam))
```
```{r}
grades <- mutate(grades, part = Participation..Real. / 5)
```
```{r}
grades$ec <- grades %>%
select(matches("(alk|Amanda|Xihong|Textbook)")) %>%
rowSums(., na.rm = TRUE)
grades %>%
select(First.name, Last.name, hw, lab, project, exam, part, ec) %>%
arrange(desc(exam))
```
```{r}
grades <- grades %>%
mutate(total = 0.15 * hw + 0.1 * lab + 0.25 * project + 0.45 * exam + 0.05 * part) %>%
mutate(grade = ifelse(total > 0.93, "A", ifelse(total > 0.89, "A-", ifelse(total > 0.86, "B+", ifelse(total > 0.82, "B", ifelse(total > 0.78, "B-", ifelse(total > 0.73, "C+", ifelse(total > 0.70, "C", ifelse(total > 0.65, "C-", "D")))))))))
g <- grades %>%
select(First.name, Last.name, hw, lab, project, exam, part, ec, total, grade) %>%
arrange(desc(total))
g
colMeans(g[3:9], na.rm=TRUE)
favstats(~total, data=grades)
tally(~grade, data = grades)
grades %>%
group_by(grade) %>%
summarize(N = n(), avg = mean(total)) %>%
arrange(desc(avg))
```
```{r}
arrange(g, Last.name)
```
g
g
grades %>%
group_by(grade) %>%
summarize(N = n(), avg = mean(total)) %>%
arrange(desc(avg))
tally(~grade, data=g)
8+22
30/77
grades <- read.csv("~/sds220-f15/student_info/MTH220-SDS220-F15 Grades-20151222_2010-comma_separated.csv", na.strings = "-")
names(grades)
grades <- select(grades, -Assignment.Homework..6..Real.)
hw_df <- grades %>%
select(contains("Homework"))
hw_df[is.na(hw_df)] <- 0
hw_df <- hw_df %>%
mutate(Assignment.Homework..1..Real. = Assignment.Homework..1..Real. * 2) %>%
mutate(hw_total = rowSums(.))
hw_df$hw_min <- apply(hw_df, MARGIN = 1, min)
# drop the lowest score??
hw_df <- hw_df %>%
mutate(hw_grade = (hw_total - 1*hw_min) / (20 * 7))
grades$hw <- hw_df$hw_grade
grades %>%
select(First.name, Last.name, hw) %>%
arrange(desc(hw))
grades
hw_df
lab_df <- grades %>%
select(matches("(Lab|Quiz|Intro|Inference|Interval|Regression|Probability|Sampling|Normal)"))
lab_df[is.na(lab_df)] <- 0
lab_df <- lab_df %>%
mutate(R.Quiz..Real. = R.Quiz..Real. * (10/14)) %>%
mutate(lab_total = rowSums(.))
lab_df$lab_min <- apply(lab_df, MARGIN = 1, min)
# drop the lowest score??
lab_df <- lab_df %>%
mutate(lab_grade = (lab_total - 1*lab_min) / (10 * 10))
grades$lab <- lab_df$lab_grade
grades %>%
select(First.name, Last.name, lab) %>%
arrange(desc(lab))
project_df <- grades %>%
select(matches("(Group|roposal|Presentation|Data\\.File|Write)"))
project_df[is.na(project_df)] <- 0
project_df <- project_df %>%
mutate(project_total = rowSums(.)) %>%
mutate(project_grade = project_total / 100)
grades$project <- project_df$project_grade
grades %>%
select(First.name, Last.name, hw, lab, project) %>%
arrange(desc(project))
thresholds <- c(80, 80, 76)
grades
grades %>% select(contains("Exam"))
grades %>% select(contains("Exam"), Name)
grades %>% select(contains("Exam"), "Name")
grades %>% select(contains("Exam"), "First.name")
grades %>% select(contains("Exam"), "First.Name")
grades %>% select(contains("Exam"), First.Name)
grades %>% select(contains("Exam"), First.name)
grades %>% select(First.name, Last.name, contains("Exam"))
thresholds <- c(80, 80, 76)
summary(grades$Exam.3..Real.)
summary(grades$Exam.3..Real.+9)
67+9
thresholds <- c(80, 80, 76)
grades <- mutate(grades, Exam.3..Real. = Exam.3..Real. + 9)
bstrap_1.idx <- with(grades, which(Exam.2..Real. >= thresholds[2] & Exam.1..Real. < thresholds[1]))
grades[bstrap_1.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_2.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.1..Real. < thresholds[1]))
grades[bstrap_1.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_3.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.2..Real. < thresholds[2]))
grades[bstrap_1.idx, "Exam.2..Real."] <- thresholds[2]
grades$exam <- grades %>%
select(contains("Exam"))
grades %>% select(contains("Exam"))
grades %>% select(First.name, Last.name, contains("Exam"))
grades$exam <- grades %>%
select(contains("Exam")) %>%
rowSums(.) / 300
grades %>%
select(First.name, Last.name, hw, lab, project, exam) %>%
arrange(desc(exam))
project_df <- grades %>%
thresholds <- c(80, 80, 76)
grades <- mutate(grades, Exam.3..Real. = Exam.3..Real. + 9)
thresholds <- c(80, 80, 76)
grades <- mutate(grades, Exam.3..Real. = Exam.3..Real. + 9)
grades <- read.csv("~/sds220-f15/student_info/MTH220-SDS220-F15 Grades-20151222_2010-comma_separated.csv", na.strings = "-")
grades <- select(grades, -Assignment.Homework..6..Real.)
thresholds <- c(80, 80, 76)
grades <- mutate(grades, Exam.3..Real. = Exam.3..Real. + 9)
bstrap_1.idx <- with(grades, which(Exam.2..Real. >= thresholds[2] & Exam.1..Real. < thresholds[1]))
grades[bstrap_1.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_2.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.1..Real. < thresholds[1]))
grades[bstrap_1.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_3.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.2..Real. < thresholds[2]))
grades[bstrap_1.idx, "Exam.2..Real."] <- thresholds[2]
grades %>% select(First.name, Last.name, contains("Exam"))
grades %>% select(First.name, Last.name, contains("Exam"))
grades <- read.csv("~/sds220-f15/student_info/MTH220-SDS220-F15 Grades-20151223_1640-comma_separated.csv", na.strings = "-")
names(grades)
grades <- select(grades, -Assignment.Homework..6..Real.)
grades %>% select(First.name, Last.name, contains("Exam"))
thresholds <- c(80, 80, 76)
grades <- mutate(grades, Exam.3..Real. = Exam.3..Real. + 9)
bstrap_1.idx <- with(grades, which(Exam.2..Real. >= thresholds[2] & Exam.1..Real. < thresholds[1]))
grades[bstrap_1.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_2.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.1..Real. < thresholds[1]))
grades[bstrap_2.idx, "Exam.1..Real."] <- thresholds[1]
bstrap_3.idx <- with(grades, which(Exam.3..Real. >= thresholds[3] & Exam.2..Real. < thresholds[2]))
grades[bstrap_3.idx, "Exam.2..Real."] <- thresholds[2]
grades %>% select(First.name, Last.name, contains("Exam"))
hw_df <- grades %>%
select(contains("Homework"))
hw_df[is.na(hw_df)] <- 0
hw_df <- hw_df %>%
mutate(Assignment.Homework..1..Real. = Assignment.Homework..1..Real. * 2) %>%
mutate(hw_total = rowSums(.))
hw_df$hw_min <- apply(hw_df, MARGIN = 1, min)
# drop the lowest score??
hw_df <- hw_df %>%
mutate(hw_grade = (hw_total - 1*hw_min) / (20 * 7))
grades$hw <- hw_df$hw_grade
grades %>%
select(First.name, Last.name, hw) %>%
arrange(desc(hw))
lab_df <- grades %>%
select(matches("(Lab|Quiz|Intro|Inference|Interval|Regression|Probability|Sampling|Normal)"))
lab_df[is.na(lab_df)] <- 0
lab_df <- lab_df %>%
mutate(R.Quiz..Real. = R.Quiz..Real. * (10/14)) %>%
mutate(lab_total = rowSums(.))
lab_df$lab_min <- apply(lab_df, MARGIN = 1, min)
# drop the lowest score??
lab_df <- lab_df %>%
mutate(lab_grade = (lab_total - 1*lab_min) / (10 * 10))
grades$lab <- lab_df$lab_grade
grades %>%
select(First.name, Last.name, lab) %>%
arrange(desc(lab))
```
project_df <- grades %>%
select(matches("(Group|roposal|Presentation|Data\\.File|Write)"))
project_df[is.na(project_df)] <- 0
project_df <- project_df %>%
mutate(project_total = rowSums(.)) %>%
mutate(project_grade = project_total / 100)
grades$project <- project_df$project_grade
grades %>%
select(First.name, Last.name, hw, lab, project) %>%
arrange(desc(project))
grades$exam <- grades %>%
select(contains("Exam")) %>%
rowSums(.) / 300
grades %>%
select(First.name, Last.name, hw, lab, project, exam) %>%
arrange(desc(exam))
grades <- mutate(grades, part = Participation..Real. / 5)
grades$ec <- grades %>%
select(matches("(alk|Amanda|Xihong|Textbook)")) %>%
rowSums(., na.rm = TRUE)
grades %>%
select(First.name, Last.name, hw, lab, project, exam, part, ec) %>%
arrange(desc(exam))
grades <- grades %>%
mutate(total = 0.15 * hw + 0.1 * lab + 0.25 * project + 0.45 * exam + 0.05 * part) %>%
mutate(grade = ifelse(total > 0.93, "A", ifelse(total > 0.9, "A-", ifelse(total > 0.86, "B+", ifelse(total > 0.82, "B", ifelse(total > 0.78, "B-", ifelse(total > 0.73, "C+", ifelse(total > 0.70, "C", ifelse(total > 0.65, "C-", "D")))))))))
g <- grades %>%
select(First.name, Last.name, hw, lab, project, exam, part, ec, total, grade) %>%
arrange(desc(total))
g
colMeans(g[3:9], na.rm=TRUE)
favstats(~total, data=grades)
tally(~grade, data = grades)
(17+18)/77
section <- c(1,1,2,1,2,1,1,2,2,2,1,1,1,2,1,1,2,2,2,2,1,1,1,2,2,1,1,2,1,1,1,2,2,2,2,1,2,1,1,1,1,2,2,1,2,1,1,1,1,2,1,2,1,2,1,1,2,2,2,1,2,2,2,1,2,1,1,2,1,1,1,1)
length(section)
section <- c(1,1,2,1,2,1,1,2,2,2,1,1,1,2,1,1,2,2,2,2,1,1,1,2,2,1,1,2,1,1,1,2,2,2,2,1,2,1,1,1,1,2,2,1,2,1,1,1,1,2,1,2,1,2,1,1,2,2,2,1,2,2,2,1,2,1,1,2)
length(section)
section <- c(1,1,2,1,2,1,1,2,2,2,1,1,1,2,1,1,2,2,2,2,1,1,1,2,2,1,1,2,1,1,1,2,2,2,2,1,2,1,1,1,1,2,2,1,2,1,1,1,1,2,1,2,1,2,1,1,2,2,2,1,2,2,2,1,2,1,1,2,2,1,2,2,1,1,2,2,2,1,1,1)
grades$section <- section
grades
g$section <- section
g
g %>% select(section ==1)
g %>% filter(section ==1)
g %>% filter(section ==1) %>% tally(~grade)
grades %>% filter(section ==1) %>% tally(~grade)
grades %>% filter(section ==1) %>% tally(grade)
grades %>% filter(section ==1)
g %>% filter(section ==1) %>% favstats(total)
g %>% filter(section ==1) %>% mean(total)
library(Stat2Data)
install.packages(Stat2Data)
install.packages("Stat2Data")
require(Stat2Data)
data(Cereal)
head(Cereal)
xyplot(Calories~Sugar, data = Cereal, type=c("p","r"))
lm(Calories~Sugar, data = Cereal)
summary(lm)
m1 <-lm(Calories~Sugar, data=Cereal)
summary(m1)
require(mosaic)
require(Stat2Data)
data(Cereal)
head(Cereal)
xyplot(Calories~Sugar, data = Cereal, type=c("p","r"))
lm(Calories~Sugar, data = Cereal)
summary(lm)
gwtwd()
getwd()
require(mosaic)
require(leaps)
data = read.csv("group-G-data.csv", strip.white=TRUE)
data = data %>%
filter(InspDate==2015) %>%
filter(CuiDesc!=c("Asian","Chinese","Chinese/Japanese","Japanese","Thai","Vietnamese/Cambodian/Malaysia","Indian","Korean", "Hamburgers","Hotdogs","Hotdogs/Pretzels", "Bakery", "Pizza", "Pizza/Italian"))
Cuisine <- c("Asian","Chinese","Chinese/Japanese","Japanese","Thai","Vietnamese/Cambodian/Malaysia","Indian","Korean", "Hamburgers","Hotdogs","Hotdogs/Pretzels", "Bakery", "Pizza", "Pizza/Italian")
data <- data %>%
filter(CuiDesc %in% Cuisine)
data$CuiDesc <- factor(data$CuiDesc)
levels(data$CuiDesc) <- c("Asian", "Bakery", "Asian", "Asian", "Fastfood", "Fastfood", "Fastfood", "Asian", "Asian", "Asian", "Pizza", "Pizza", "Asian", "Asian")
levels(data$CuiDesc)
levels(data$InspType) <- c("", rep("Administrative Miscellaneous", times = 5), rep("Calorie Posting", times = 4), rep("Cycle Inspection", times = 5), rep("Inter-Agency Task Force", times = 2), rep("Pre-permit", times = 8), rep("Smoke-Free Air Act", times = 5), rep("Trans Fat", times = 4))
data <- data %>%
filter(InspType%in%c("Cycle Inspection", "Inter-Agency Task Force", "Pre-permit")) %>%
mutate(InspType=factor(InspType))
data <- data %>%
filter(Boro!="Missing") %>%
mutate(Boro=factor(Boro))
step1 <- regsubsets(Score~CriFlag+InspType+CuiDesc+Boro, data=data, nbest = 1, nvmax = 10, method = c("exhaustive"))
data = read.csv("group-G-data.csv", strip.white=TRUE)
data = data %>%
filter(InspDate==2015) %>%
filter(CuiDesc!=c("Asian","Chinese","Chinese/Japanese","Japanese","Thai","Vietnamese/Cambodian/Malaysia","Indian","Korean", "Hamburgers","Hotdogs","Hotdogs/Pretzels", "Bakery", "Pizza", "Pizza/Italian"))
data = read.csv("group-G-data.csv", strip.white=TRUE)
Cuisine <- c("Asian","Chinese","Chinese/Japanese","Japanese","Thai","Vietnamese/Cambodian/Malaysia","Indian","Korean", "Hamburgers","Hotdogs","Hotdogs/Pretzels", "Bakery", "Pizza", "Pizza/Italian")
data <- data %>%
filter(CuiDesc %in% Cuisine)
data$CuiDesc <- factor(data$CuiDesc)
levels(data$CuiDesc) <- c("Asian", "Bakery", "Asian", "Asian", "Fastfood", "Fastfood", "Fastfood", "Asian", "Asian", "Asian", "Pizza", "Pizza", "Asian", "Asian")
levels(data$InspType) <- c("", rep("Administrative Miscellaneous", times = 5), rep("Calorie Posting", times = 4), rep("Cycle Inspection", times = 5), rep("Inter-Agency Task Force", times = 2), rep("Pre-permit", times = 8), rep("Smoke-Free Air Act", times = 5), rep("Trans Fat", times = 4))
data <- data %>%
filter(InspType%in%c("Cycle Inspection", "Inter-Agency Task Force", "Pre-permit")) %>%
mutate(InspType=factor(InspType))
data <- data %>%
filter(Boro!="Missing") %>%
mutate(Boro=factor(Boro))
step1 <- regsubsets(Score~CriFlag+InspType+CuiDesc+Boro, data=data, nbest = 1, nvmax = 10, method = c("exhaustive"))
Sex <- rep(Titanic$Sex,Titanic$Freq)
require(Stat2Data)
require(mosaic)
data(Titanic)
two.way = tally(~Survived | Sex, data=Titanic, format="count")
two.way
lm2 <- glm(Survived ~ Age + Sex,data=Titanic,family="binomial")
getwd()
setwd(""/Users/amelia/Documents/sds291/www/labs")
setwd("/Users/amelia/Documents/sds291/www/labs")
setwd("/Users/amelia/Documents/sds291/www/labs/")
setwd("/Users/amelia/Documents/SDS291/www/labs/")
setwd("/Users/amelia/SDS291/www/labs/")
doctors = read_csv("sample_data/Physicians.csv")
require(mosaic)
require(readr)
require(tidyr)
doctors = read_csv("sample_data/Physicians.csv")
str(doctors)
doctors = read.csv("sample_data/Physicians.csv")
str(doctors)
doctorsDot = read.csv("sample_data/Physicians.csv")
str(doctorsDot)
doctors = read_csv("sample_data/Physicians.csv")
str(doctors)
names(doctors)
mean(~`Physicians per 100,000 Population`, data=doctors)
favstats(~`Physicians per 100,000 Population`, data=doctors)
rename
?rename
doctors = doctors %>%
rename(Physicians = `Physicians per 100,000 Population`)
names(doctors)
doctors %>%
select(Physicians)
View(doctors)
summary(doctors$Physicians)
tally(~Physicians, data=doctors)
doctors = read_csv("sample_data/Physicians.csv", na = c("", NA, "N/A"))
doctors = doctors %>%
rename(Physicians = `Physicians per 100,000 Population`)
tally(~Physicians, data=doctors)
favstats(~Physicians, data=doctors)
mean(~Physicians, data=doctors)
mean(~Physicians, data=doctors, na.rm=TRUE)
names(doctorsDot)
mean(~`Physicians.per.100.000.Population`, data=doctorsDot)
mean(~`Physicians.per.100.000.Population`, data=doctorsDot, na.rm=TRUE)
mean(~Physicians.per.100.000.Population, data=doctorsDot, na.rm=TRUE)
mean(~factor(Physicians), data=doctors, na.rm=TRUE)
mean(~Physicians.per.100.000.Population, data=doctorsDot, na.rm=TRUE)
mean(~as.numeric(Physicians.per.100.000.Population), data=doctorsDot, na.rm=TRUE)
head(doctors)
as.numeric(doctorsDot$Physicians.per.100.000.Population)
mean(~as.numeric(as.character(Physicians.per.100.000.Population)), data=doctorsDot, na.rm=TRUE)
tally(~States, data=doctors)
View(doctors)
tally(~State, data=doctors)
doctors = doctors %>%
filter(State != "All US", State != "Puerto Rico")
tally(~State, data=doctors)
tally(~State, data=doctors)
GroupA_PoliceKillings <- read.csv("~/Downloads/SDS291- 01_MTH291- 01_201701-Data appendix-121707/Ji Young Yun_107461_assignsubmission_file_GroupA Data/GroupA_PoliceKillings.csv")
View(GroupA_PoliceKillings)
killings <- GroupA_PoliceKillings %>%
group_by(state) %>%
summarize(n = n())
View(killings)
killings = killings %>%
rename(deaths = n)
write_csv(killings, path="policekillings.csv")
policekillings = read_csv("sample_data/policekillings.csv")
str(policekillings)
library(stringr)
?stringr
policekillings = policekillings %>%
mutate(stateAbbreviated = state.abb[match(state, state.name)])
View(killings)
View(policekillings)
state.abb[match(policekillings$state, state.name)]
state.name
match(policekillings$state, state.name)
amatch(policekillings$state, state.name)
grep(policekillings$state, state.name)
match(policekillings$state, state.name)
match(policekillings$state, state.abb)
policekillings = policekillings %>%
mutate(stateAbbreviated = state.name[match(state, state.abb)])
policekillings = policekillings %>%
mutate(stateFull = state.name[match(state, state.abb)])
policekillings = read_csv("sample_data/policekillings.csv")
policekillings = policekillings %>%
mutate(stateFull = state.name[match(state, state.abb)])
str(policekillings)
joinedData = policekillings %>%
left_join(doctors)
joinedData = policekillings %>%
left_join(doctors, by = c("stateFull", "state"))
names(policekillings)
names(doctors)
joinedData = policekillings %>%
left_join(doctors, by = c("stateFull", "State"))
joinedData =  left_join(policekillings, doctors, by = c("stateFull", "State"))
names(policekillings)
joinedData =  left_join(policekillings, doctors, by = c("State", "stateFull"))
joinedData =  left_join(policekillings, doctors, by = c("stateFull"= "State"))
View(joinedData)
policekillings = policekillings %>%
mutate(state = state.name[match(state, state.abb)])
str(policekillings)
policekillings = read_csv("sample_data/policekillings.csv")
str(policekillings)
policekillings = policekillings %>%
mutate(state = state.name[match(state, state.abb)])
str(policekillings)
joinedData =  left_join(policekillings, doctors, by = c("state"= "State"))
joinedData = policekillings %>%
left_join(doctors)
joinedData =  left_join(policekillings, doctors)
joinedData =  left_join(policekillings, doctors, by = c("state"= "State"))
str(joinedData)
joinedData =  left_join(doctors, policekillings, by = c("State"= "state"))
str(joinedData)
?right_join
politics = read_csv("sample_data/politics.csv")
View(politics)
str(politics)
politics = politics %>%
filter(Country == "United States")
tally(~Country, data=politics)
politics = politics %>%
filter(Country == "Bulgaria")
politics = politics %>%
filter(Country == "Bulgaria")
View(politics)
politics = politics %>%
filter(Country == "Sweden")
View(politics)
levels(politics$Country)
which(politics$Country == "Sweden")
politics = politics %>%
filter(Country == "Sweden")
library(dplyr)
politics = politics %>%
filter(Country == "Sweden")
tally(~Country, data=politics)
sum(tally(~Country, data=politics))
table(~Country, data=politics)
table(politics$Country)
young = politics %>%
filter(BirthYear > 1989)
?read_csv()
politics = read_csv("sample_data/politics.csv", col_names=FALSE)
politics = read_csv("sample_data/politics.csv", col_names=TRUE)
View(politics)
names(politics) = make.unique(names(politics))
names(politics)
politics = politics %>%
rename(obs = "")
politics = politics %>%
rename(obs = )
names(politics)
young = politics %>%
filter(BirthYear > 1989)
