x = 1:100
p = rnorm(1)
y = jitter(x^p, factor = length(x) / 2)
Rand = data.frame(x,y)
xyplot(y ~ x, data=Rand)
require(mosaic)
xyplot(y ~ x, data=Rand)
fm = lm(y ~ x, data=Rand)
summary(fm)
plot(fm, which=1)
plot(fm, which=2)
Rand = Rand %>%
mutate(y_new = log(y))
xyplot(y_new ~ x, data=Rand)
Rand = Rand %>%
mutate(y_new = sqrt(y))
xyplot(y_new ~ x, data=Rand)
Rand = Rand %>%
mutate(y_new = y^2)
xyplot(y_new ~ x, data=Rand)
Rand = Rand %>%
mutate(y_new = log(y))
xyplot(y_new ~ x, data=Rand)
Rand = Rand %>%
mutate(y_new = log(y),
x_new=log(x))
xyplot(y_new ~ x_new, data=Rand)
p
1/0.05
p = rnorm(1)
Rand = Rand %>%
mutate(y = jitter(x^p, factor = length(x) / 2))
tukeyLadder = function (x, q=NULL) {
if(is.null(q)) {
return(x)
}
if (q==0) {
x.new = log(x)
} else {
if (q < 0) {
x.new = - x^q
} else {
x.new = x^q
}
}
return(x.new)
}
tukeyPlot = function (x, y, q.y, q.x=1, ...) {
y.new = tukeyLadder(y, q.y)
x.new = tukeyLadder(x, q.x)
y.center = mean(y.new, na.rm=TRUE)
x.center = mean(x.new, na.rm=TRUE)
x.bottom = 0.1 * (max(y.new) - min(y.new)) + min(y.new)
y.left = 0.1 * (max(x.new) - min(x.new)) + min(x.new)
xyplot(y.new ~ x.new
, panel = function(x,y,...) {
panel.xyplot(x,y, pch=19, alpha=0.5, cex=2)
panel.text(y.left, y.center, paste("q.y =", q.y), col="red", cex=2)
panel.text(x.center, x.bottom, paste("q.x =", q.x), col="red", cex=2)
}
)
}
require(manipulate)
manipulate(
with(Rand, tukeyPlot(x, y, q.y))
, q.y = slider(-3, 3, step=0.25, initial=1)
)
p
1/1.68
require(Stat2Data)
data(SpeciesArea)
xyplot(Species ~ Area, data=SpeciesArea)
manipulate(
with(SpeciesArea, tukeyPlot(Area, Species, q.y, q.x))
, q.y = slider(-3, 3, step=0.25, initial=1)
, q.x = slider(-3, 3, step=0.25, initial=1)
)
manipulate(
with(SpeciesArea, tukeyPlot(Area, Species, q.y, q.x))
, q.y = slider(-3, 3, step=0.25, initial=1)
, q.x = slider(-3, 3, step=0.25, initial=1)
)
xyplot(log(Species) ~ log(Area), data=SpeciesArea)
m1 <- lm(Species~Area^(0.25), data=SpeciesArea)
SpeciesArea = SpeciesArea %>%
mutate(new_Area = Area^(0.25))
m1 <- lm(Species~new_Area, data=SpeciesArea)
plot(m1)
m2 <- lm(log(Species)~log(Area), data=SpeciesArea)
plot(m2)
ggplot(iris, aes(x = Sepal.Length)) + geom_dotplot()
ggplot(iris, aes(y = Sepal.Length, x=x)) + geom_dotplot()
ggplot(iris, aes(y = Sepal.Length, x=x)) + geom_point()
m1 <- lm(mpg~cyl, data=mtcars)
plot(m1)
fortify(m1)
x = seq(from=1, to=100, by=1)
p = rnorm(1)
y = jitter(x^p, factor = length(x) / 2)
Rand = data.frame(x,y)
xyplot(y ~ x, data=Rand)
fm = lm(y ~ x, data=Rand)
summary(fm)
plot(fm, which=1)
plot(fm, which=2)
Rand = Rand %>%
mutate(y_new = log(y))
Rand = Rand %>%
mutate(y_new = log(y))
xyplot(y_new ~ x, data=Rand)
Rand = Rand %>%
mutate(y_new = log(y),
x_new=log(x))
xyplot(y_new ~ new_x, data=Rand)
xyplot(y_new ~ x_new, data=Rand)
p
1/(1/2)
p = rnorm(1)
Rand = Rand %>%
mutate(y = jitter(x^p, factor = length(x) / 2))
require(manipulate)
manipulate(
with(Rand, tukeyPlot(x, y, q.y))
, q.y = slider(-3, 3, step=0.25, initial=1)
)
p
1/2.75
require(fueleconomy)
install.packages("fueleconomy")
# install.packages("fueleconomy")
require(fueleconomy)
m1 <- lm(log(hwy)~displ, data=vehicles)
coef(m1)
contrasts(mtcars$cyl)
mtcars <- mtcars %>%
mutate(cyl = factor(cyl))
contrasts(mtcars$cyl)
?contrasts
fff <- ff[, drop = TRUE]
utils::example(factor)
fff <- ff[, drop = TRUE]
summary(fff)
contrats(fff)
contrasts(fff)
fff %>% contrasts()
mtcars %>%
select(cyl) %>%
contrasts
mtcars %>%
select(cyl) %>%
contrasts()
str(mtcars)
mtcars %>% select(cyl) %>% contrasts()
mtcars %>% select(cyl) %>% tally()
mtcars %>% select(cyl) %>% .$cyl %>% contrasts()
require(fueleconomy)
data(fueleconomy)
data(vehicles)
str(vehicles)
m1 <- lm(hwy~cty, data=vehicles)
summary(m1)
m1 = lm(hwy~cty, data=vehicles)
xyplot(hwy~cty, data=vehicles)
library(mosaic)
xyplot(hwy~cty, data=vehicles)
xyplot(hwy~cty, data=vehicles)
View(vehicles)
View(vehicles)
m1 = lm(hwy~displ, data=vehicles)
xyplot(hwy~displ, data=vehicles)
summary(m1)
xyplot(hwy~cyl, data=vehicles)
m1 = lm(hwy~cyl, data=vehicles)
summary(m1)
m1 <- lm(Calories~Sugar, data=Cereal)
require(Stat2Data)
data(Cereal)
m1 <- lm(Calories~Sugar, data=Cereal)
coef(m1)
summary(m1)
xyplot(Calories~Sugar, data=Cereal)
aov(m1)
anova(m1)
fm.full <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest = 1, nvmax = 4, method = "backward")
require(mosaic)
require(Stat2Data)
data(FirstYearGPA)
head(FirstYearGPA)
require(leaps)
install.packages("leaps")
require(leaps)
best <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest=2)
with(summary(best), data.frame(rsq, adjr2, cp, rss, outmat))
with(summary(best), data.frame(rsq, adjr2, cp, aic, rss, outmat))
with(summary(best), data.frame(rsq, adjr2, cp, rss, outmat))
m1 <- lm(GPA~SATV+SATM, data=FirstYearGPA)
AIC(m1)
fm.full <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest = 1, nvmax = 4, method = "backward")
fm.full
fm.full <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest = 1, nvmax = 6, method = "backward")
fm.full
summary(fm.full)
m1 <- lm(GPA~HSGPA, data=FirstYearGPA)
summary(m1)
fm.empty <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest = 1, nvmax = 6, method = "forward")
summary(fm.empty)
?regsubsets
fm.empty <- regsubsets(GPA ~ 1, data=FirstYearGPA, nbest = 1, nvmax = 6, method = "forward")
fm.empty <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest = 1, nvmax = 6, method = "forward")
summary(fm.empty)
fm.stepwise <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest = 1, nvmax = 6, method = "segrep")
fm.stepwise <- regsubsets(GPA ~ ., data=FirstYearGPA, nbest = 1, nvmax = 6, method = "seqrep")
summary(fm.stepwise)
