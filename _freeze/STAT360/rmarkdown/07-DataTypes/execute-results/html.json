{
  "hash": "4f7ff21befb79e92ac79892d7c8edb41",
  "result": {
    "markdown": "---\ntitle: \"More Data Types and Syntax\"\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Your turn 1\n\nLook at the R object WorldPhones (by typing its name in your notebook or the Console and hitting enter). \n\n\n::: {.cell}\n\n:::\n\n\n\n## Vectors and matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1, 2, 3, 10, 100)\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1   2   3  10 100\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(c(1, 2, 3, 4, 5, 6), nrow = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(c(1, 2, 3, 4, 5, 6), nrow = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n:::\n\n\n## Math with vectors and matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec + 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   5   6   7  14 104\n```\n:::\n\n```{.r .cell-code}\nvec * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   4   8  12  40 400\n```\n:::\n\n```{.r .cell-code}\nvec * vec # element-wise multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]     1     4     9   100 10000\n```\n:::\n\n```{.r .cell-code}\nvec %*% vec # matrix multiplication (inner)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]\n[1,] 10114\n```\n:::\n\n```{.r .cell-code}\nvec %o% vec # matrix multiplication (outer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]  [,5]\n[1,]    1    2    3   10   100\n[2,]    2    4    6   20   200\n[3,]    3    6    9   30   300\n[4,]   10   20   30  100  1000\n[5,]  100  200  300 1000 10000\n```\n:::\n\n```{.r .cell-code}\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nt(mat) # transpose\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n:::\n:::\n\n\n## Arrays\n\n\n::: {.cell}\n\n```{.r .cell-code}\narray(c(1, 2, 3, 4, 5, 6), dim = c(2, 2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    1\n[2,]    6    2\n\n, , 3\n\n     [,1] [,2]\n[1,]    3    5\n[2,]    4    6\n```\n:::\n:::\n\n\n## Data types\nNumeric\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n3000000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3e+06\n```\n:::\n\n```{.r .cell-code}\nclass(0.00001)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nCharacter\n\n::: {.cell}\n\n```{.r .cell-code}\n\"hello\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\nclass(\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n\"hello\" + \"world\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"hello\" + \"world\": non-numeric argument to binary operator\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnchar(\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\npaste(\"hello\", \"world\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello world\"\n```\n:::\n:::\n\n\nLogical\n\n::: {.cell}\n\n```{.r .cell-code}\n3 > 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\nFactor (danger zone!)\n\n::: {.cell}\n\n```{.r .cell-code}\nfac <- factor(c(\"a\", \"b\", \"c\"))\nfac\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] a b c\nLevels: a b c\n```\n:::\n\n```{.r .cell-code}\nclass(fac)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n\n## Your turn \n\nMake a vector that contains the number 1, the letter R, and the logical TRUE\n\n\n::: {.cell}\n\n:::\n\n\n## Quiz\nWhat type of data will result?\n\n## Lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlst <- list(1, \"R\", TRUE)\nclass(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\n## Data frames\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(c(1, 2, 3), \n c(\"R\",\"S\",\"T\"), c(TRUE, FALSE, TRUE))\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\n## Naming \n\n::: {.cell}\n\n```{.r .cell-code}\nnvec <- c(one = 1, two = 2, three = 3)\nnlst <- list(one = 1, two = 2, many = c(3, 4, 5))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nndf <- data.frame(numbers = c(1, 2, 3), \n          letters = c(\"R\",\"S\",\"T\"), \n          logic = c(TRUE, FALSE, TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(ndf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numbers\" \"letters\" \"logic\"  \n```\n:::\n\n```{.r .cell-code}\nnames(nvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"one\"   \"two\"   \"three\"\n```\n:::\n:::\n\n\n\n\n## Subsetting\n\n## The dplyr way\nTo use the dplyr package, we need to load it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\n\n\n## Beatles data\nLet's make a toy dataset to play with. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeatles <- data.frame(\n  name = c(\"John\", \"Paul\", \"George\", \"Ringo\"),\n  birth = c(1940, 1942, 1943, 1940), \n  instrument = c(\"guitar\", \"bass\", \"guitar\", \"drums\")\n)\n```\n:::\n\n\n## Select\nSelect is a way to extract columns from dataframes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(beatles, name, birth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name birth\n1   John  1940\n2   Paul  1942\n3 George  1943\n4  Ringo  1940\n```\n:::\n:::\n\n\n## Your turn\nSelect just the instrument column\n\n\n\n## Base R\n\n::: {.cell}\n\n```{.r .cell-code}\nbeatles[2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bass\"\n```\n:::\n\n```{.r .cell-code}\nbeatles[ ,\"birth\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1940 1942 1943 1940\n```\n:::\n\n```{.r .cell-code}\nbeatles[ ,c(\"name\",\"birth\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name birth\n1   John  1940\n2   Paul  1942\n3 George  1943\n4  Ringo  1940\n```\n:::\n\n```{.r .cell-code}\nbeatles$birth\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1940 1942 1943 1940\n```\n:::\n:::\n\n\n## Your turn\nSelect just the instrument column using brackets\n\n\n::: {.cell}\n\n:::\n\n\nSelect just the instrument column using a dollar sign.\n\n\n::: {.cell}\n\n:::\n\n\n## Filter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(beatles, name == \"George\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name birth instrument\n1 George  1943     guitar\n```\n:::\n:::\n\n\n## Your turn\n\n\n## More than one condition\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(beatles, birth==1940, instrument == \"guitar\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name birth instrument\n1 John  1940     guitar\n```\n:::\n\n```{.r .cell-code}\nfilter(beatles, birth==1940 & instrument == \"guitar\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name birth instrument\n1 John  1940     guitar\n```\n:::\n:::\n\n\n## Your turn\nModify  the code below to filter out the rows for which birth is 1943 or instrument is drums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(beatles, birth==1940 & instrument == \"guitar\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name birth instrument\n1 John  1940     guitar\n```\n:::\n:::\n\n\n\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeatles[c(FALSE,TRUE,TRUE,FALSE), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name birth instrument\n2   Paul  1942       bass\n3 George  1943     guitar\n```\n:::\n\n```{.r .cell-code}\nbeatles[beatles$birth == 1940, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   name birth instrument\n1  John  1940     guitar\n4 Ringo  1940      drums\n```\n:::\n:::\n\n\n## Your turn\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}