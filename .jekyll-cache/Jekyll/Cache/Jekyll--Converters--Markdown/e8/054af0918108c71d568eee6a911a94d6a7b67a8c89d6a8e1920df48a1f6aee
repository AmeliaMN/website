I"ú<p>For my rstudio::conf working, Intro to R &amp; RStudio, I finally finished my <a href="https://github.com/rstudio/cheatsheets/raw/master/syntax.pdf">cheatsheet on R syntaxes</a>. I‚Äôve been working on this for at least a year (üò± ), so I‚Äôm glad to see it out in the wild.</p>

<p>When I posted the cheatsheet online, I got some critical feedback, which I would like to address in the form of a FAQ.</p>

<!--more-->

<p><a class="thumb" href="https://github.com/rstudio/cheatsheets/raw/master/syntax.pdf"><img src="https://www.amelia.mn/img/SyntaxComparisonCheatsheet.jpg" class="img-responsive" alt="R syntax comparison cheatsheet" /></a></p>

<p><strong>Q: Why didn‚Äôt you include data.table syntax?</strong></p>

<p><strong>A:</strong> Mostly, because I don‚Äôt know <code class="language-plaintext highlighter-rouge">data.table</code>, so I wouldn‚Äôt have done a good job. Also, because I don‚Äôt know of anyone who is teaching data.table to absolute novices. However, if someone wanted to generate all the analogous tasks (summary statistics, plots, wrangling) in data.table and share them, I would be very interested.</p>

<p><strong>Q: Why did you use the word ‚Äúsyntax‚Äù when that‚Äôs not quite precise?</strong></p>

<p><strong>A:</strong> Because that is a word commonly associated with programming languages. While these three paradigms may not be precisely three different syntaxes, they are certainly <a href="https://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a> or idioms within the language. I often refer to them as like accents within a human language. If you were learning English, you wouldn‚Äôt try to learn it with a British accent, an accent from the American South, and an accent from Australia. You‚Äôd learn it one way, and be able to recognize other accents.</p>

<p><strong>Q: Why didn‚Äôt you express [x] in this more efficient way?</strong></p>

<p><strong>A:</strong> This usually comes up because of my use of</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mean</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">mpg</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">cyl</span><span class="o">==</span><span class="m">4</span><span class="p">])</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">mpg</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">cyl</span><span class="o">==</span><span class="m">6</span><span class="p">])</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">mpg</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">cyl</span><span class="o">==</span><span class="m">8</span><span class="p">])</span></code></pre></figure>

<p>instead of</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tapply</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">mpg</span><span class="p">,</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">cyl</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)</span></code></pre></figure>

<p>and</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mtcars</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
    </span><span class="n">mutate</span><span class="p">(</span><span class="n">efficient</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">if_else</span><span class="p">(</span><span class="n">mpg</span><span class="o">&gt;</span><span class="m">30</span><span class="p">,</span><span class="w">  </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">))</span></code></pre></figure>

<p>instead of</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mtcars</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
    </span><span class="n">mutate</span><span class="p">(</span><span class="n">efficient</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">if_else</span><span class="p">(</span><span class="n">mpg</span><span class="o">&gt;</span><span class="m">30</span><span class="p">))</span></code></pre></figure>

<p>In both of these cases, I was erring on the side of</p>

<ul>
  <li>a) more verbosity</li>
  <li>b) a more general pattern</li>
</ul>

<p>Personally, although I learned R long before the tidyverse existed, I never got adept at the <code class="language-plaintext highlighter-rouge">apply()</code> family of functions. Every time I needed to use one, it was a fall down a rabbithole of ‚Äútapply? sapply? mapply?‚Äù (In fact, trying to create that tapply call for this post included just such a search.) While I would encourage people coding within the base R paradigm to learn these functions, I think the three-line version is easier to think through, and represents a much more common ‚Äústyle‚Äù that you will see on places like StackOverflow. In many cases, there is no <code class="language-plaintext highlighter-rouge">apply</code> equivalent, and you end up doing this sort of repetitive writing of the dataset name and nesting of statements.</p>

<p>With the <code class="language-plaintext highlighter-rouge">mutate()</code> call, even though it was unnecessary to include the TRUE and FALSE, I knew that it would provide a better pattern for students who wanted to make their own variables. If you want <code class="language-plaintext highlighter-rouge">efficient</code> to instead be ‚Äúyes‚Äù and ‚Äúno‚Äù character strings, you can just sub ‚Äúyes‚Äù for TRUE and ‚Äúno‚Äù for FALSE, without having to think about the magic that goes with logicals.</p>

<p><strong>Q: Why didn‚Äôt you show ggformula or the formula-based base R plots?</strong></p>

<p><strong>A:</strong> I did! They‚Äôre just on the back of the sheet. I don‚Äôt feel like <a href="https://cran.r-project.org/web/packages/ggformula/index.html">ggformula</a> is a full-fledged graphics library yet, so I don‚Äôt want to present it as such. <code class="language-plaintext highlighter-rouge">base</code> graphics, <code class="language-plaintext highlighter-rouge">lattice</code> graphics and <code class="language-plaintext highlighter-rouge">ggplot2</code> graphics are all full libraries, so I used those on the front of the sheet. As for formula-based base R plots, I think they are much less common online. My main use case for this cheatsheet is to give to students who I am teaching one particular syntax. For example, I used to teach completely in the formula syntax, but have switched to tidyverse syntax. However, sometimes when I demo code I switch to another syntax because it feels more natural for the task. Or, students google something and find code from another syntax. The cheatsheet serves as a grounding device to say, this is just another way to express the same idea I am familiar with. Since I (almost) never teach base R, I include it on the cheatsheet mostly as a foil to my argument that the tidyverse is more human-readable.</p>

<p>Do you have other questions? Ask me in the comments!</p>

:ET